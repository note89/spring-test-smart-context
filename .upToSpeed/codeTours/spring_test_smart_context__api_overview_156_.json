{"title":"Spring Test Smart Context: API Overview","id":"WC/u/QiDKmPkBDTxTAYNIeiZ+Q1yid9LDkGmsOywdUc=","steps":[{"type":"textOnly","description":"Welcome to the Spring Test Smart Context project! This library is designed to enhance Spring Boot test efficiency by addressing a critical issue: potential out-of-memory errors caused by multiple Spring application contexts in large test suites. As an experienced Java developer, you'll appreciate how this can significantly improve your testing workflow.","title":"","id":"1866"},{"type":"textOnly","description":"In this tour, we'll explore the main public APIs of the Spring Test Smart Context library. These APIs are categorized into three main areas:\n\n1. Configuration: APIs for setting up and customizing the Smart Context behavior.\n2. Annotations: Custom annotations that you can use to control context caching and reuse.\n3. Utilities: Helper classes and methods that provide additional functionality and information.\n\nLet's dive into each of these categories to see how they can help optimize your Spring Boot test suites.","title":"","id":"1867"},{"type":"highlight","description":"Let's start with the core component of the library, the SmartDirtiesContextTestExecutionListener. This class extends Spring's AbstractTestExecutionListener and is responsible for automatically closing ApplicationContexts when they're no longer needed.","file":"spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java","highlight":[{"start":22,"end":46}],"title":"","id":"1856"},{"type":"highlight","description":"The key method in this listener is afterTestClass(). It checks if the current test class is the last one using a particular Spring context configuration. If so, it marks the context as dirty, triggering cleanup and resource release.","file":"spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java","highlight":[{"start":33,"end":45}],"title":"","id":"1857"},{"type":"textOnly","description":"The library provides abstract base classes for different test frameworks to make integration easier. Let's look at these classes for JUnit 5 Jupiter, TestNG, and JUnit 4.","title":"","id":"1858"},{"type":"highlight","description":"For JUnit 5 Jupiter tests, you can extend the AbstractJUnitSpringIntegrationTest class. This class is already configured with the necessary annotations to use the SmartDirtiesContextTestExecutionListener.","file":"spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/AbstractJUnitSpringIntegrationTest.java","highlight":[{"start":14,"end":20}],"title":"","id":"1859"},{"type":"highlight","description":"For TestNG tests, you can extend the AbstractTestNGSpringIntegrationTest class. Similar to the JUnit 5 version, this class is pre-configured to use the SmartDirtiesContextTestExecutionListener.","file":"spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/AbstractTestNGSpringIntegrationTest.java","highlight":[{"start":13,"end":18}],"title":"","id":"1860"},{"type":"highlight","description":"For JUnit 4 tests, there's AbstractJUnit4SpringIntegrationTest and SmartDirtiesPostDiscoveryFilter. The AbstractJUnit4SpringIntegrationTest class is pre-configured with the necessary listeners, while the SmartDirtiesPostDiscoveryFilter helps in optimizing test execution by reordering test classes. However, note that JUnit 4 support is deprecated and will be removed in future versions, so it's recommended to migrate to JUnit 5 or TestNG for long-term support.","file":"spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/junit4/AbstractJUnit4SpringIntegrationTest.java","highlight":[{"start":14,"end":20}],"title":"","id":"1861"},{"type":"textOnly","description":"One of the key features of this library is its ability to reorder test classes to optimize context reuse. We've seen how this is handled differently for JUnit 5 Jupiter (using SmartDirtiesClassOrderer) and TestNG (using SmartDirtiesSuiteListener). \n\nHowever, as an experienced Java developer, you might prefer more flexibility in how you integrate this library into your existing test infrastructure. The Spring Test Smart Context library allows for manual configuration without extending the provided abstract base classes.\n\nTo manually configure the library:\n\n1. Add the SmartDirtiesContextTestExecutionListener to your test class or configuration.\n2. For JUnit 5, use the @ClassOrderer annotation with SmartDirtiesClassOrderer.\n3. For TestNG, register the SmartDirtiesSuiteListener in your testng.xml file.\n\nThis approach gives you fine-grained control over the library's integration, allowing you to customize its usage based on your project's specific needs. In the next step, we'll look at a concrete example of how to implement this manual configuration.","title":"","id":"1862"},{"type":"highlight","description":"The SmartDirtiesClassOrderer class is a key component in JUnit 5 Jupiter for reordering test classes. It implements the ClassOrderer interface and extends SmartDirtiesTestsHolder, which provides shared functionality for managing test ordering.","file":"spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/SmartDirtiesClassOrderer.java","highlight":[{"start":22,"end":22}],"title":"","id":"1868"},{"type":"highlight","description":"The orderClasses method is the main public API of SmartDirtiesClassOrderer. It takes a ClassOrdererContext as input, which contains the list of class descriptors to be ordered.","file":"spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/SmartDirtiesClassOrderer.java","highlight":[{"start":24,"end":29}],"title":"","id":"1869"},{"type":"highlight","description":"The orderClasses method first checks if there's only one unique test class. If so, it handles this special case by setting the test classes list accordingly and returns early.","file":"spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/SmartDirtiesClassOrderer.java","highlight":[{"start":31,"end":44}],"title":"","id":"1870"},{"type":"highlight","description":"For multiple test classes, SmartDirtiesClassOrderer uses a SmartDirtiesTestsSorter to sort the class descriptors. The sorted list is then stored using the setTestClassesLists method from SmartDirtiesTestsHolder.","file":"spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/SmartDirtiesClassOrderer.java","highlight":[{"start":46,"end":50}],"title":"","id":"1871"},{"type":"revealFiles","files":["spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/SmartDirtiesSuiteListener.java"],"description":"Let's examine the SmartDirtiesSuiteListener class, which is crucial for test reordering in TestNG. This class implements two important interfaces: IAlterSuiteListener and IMethodInterceptor.","title":"","id":"1872"},{"type":"highlight","description":"The SmartDirtiesSuiteListener class extends SmartDirtiesTestsHolder and implements two TestNG interfaces. This allows it to intercept and modify the test execution process.","file":"spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/SmartDirtiesSuiteListener.java","highlight":[{"start":24,"end":25}],"title":"","id":"1873"},{"type":"highlight","description":"The alter method is called by TestNG to modify the test suite. It ensures that the order of tests is preserved during execution.","file":"spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/SmartDirtiesSuiteListener.java","highlight":[{"start":27,"end":41}],"title":"","id":"1874"},{"type":"highlight","description":"The intercept method is where the actual test reordering happens. It uses the SmartDirtiesTestsSorter to sort the test classes and optimize context reuse.","file":"spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/SmartDirtiesSuiteListener.java","highlight":[{"start":43,"end":61}],"title":"","id":"1875"},{"type":"textOnly","description":"The SmartDirtiesSuiteListener class plays a crucial role in optimizing TestNG test execution. By implementing IAlterSuiteListener and IMethodInterceptor, it can modify the test suite and reorder test methods. This reordering is done to maximize context reuse, potentially improving test execution performance. The class works in conjunction with other components like SmartDirtiesTestsSorter to achieve this optimization.","title":"","id":"1876"},{"type":"textOnly","description":"Now, let's look at a practical example of how to use the Spring Test Smart Context library in your project. Here's a sample test class that demonstrates the usage of the main APIs we've covered:\n\n```java\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport com.github.seregamorph.testsmartcontext.jupiter.AbstractJUnitSpringIntegrationTest;\nimport com.github.seregamorph.testsmartcontext.jupiter.SmartDirtiesClassOrderer;\nimport org.junit.jupiter.api.ClassOrderer;\nimport org.junit.jupiter.api.TestClassOrder;\n\n@SpringBootTest\n@TestClassOrder(SmartDirtiesClassOrderer.class)\npublic class SampleIntegrationTest extends AbstractJUnitSpringIntegrationTest {\n\n    @Test\n    void testSomeFunctionality() {\n        // Your test logic here\n    }\n}\n```\n\nIn this example:\n\n1. We extend `AbstractJUnitSpringIntegrationTest`, which automatically includes the `SmartDirtiesContextTestExecutionListener`.\n2. We use the `@TestClassOrder(SmartDirtiesClassOrderer.class)` annotation to enable smart test class ordering.\n3. The `@SpringBootTest` annotation is used as normal to configure the Spring test context.\n\nBy structuring your tests this way, you'll benefit from:\n- Automatic context caching and cleanup\n- Optimized test class ordering for better context reuse\n- Reduced memory usage in large test suites\n\nRemember, this setup works seamlessly with your existing Spring Boot tests, requiring minimal changes to your current test structure.","title":"","id":"1865"}]}